
---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [cosmo, notebooks/custom.scss]
    output-file: curve_fitting.html
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}
fontsize: 0.9em

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="curve_fitting_files/md-default2.js" type="text/javascript"></script><script src="curve_fitting_files/md-default3.js" type="text/javascript"></script><script src="curve_fitting_files/vega4.js" type="text/javascript"></script><script src="curve_fitting_files/vega5.js" type="text/javascript"></script><script src="curve_fitting_files/vega6.js" type="text/javascript"></script>

# Curve fitting example
Samsung A12 charge percentage vs. time graph
This is a Clojure port of a Python program by Omer ZAK.

Authors: Omer Zak, Daniel Slutsky


::: {.sourceClojure}
```clojure
(ns curve-fitting
  (:require [tablecloth.api :as tc]
            [tablecloth.pipeline :as tcpipe]
            [fastmath.stats :as fmstats]
            [tech.v3.datatype.functional :as fun]
            [scicloj.metamorph.core :as mm]
            [scicloj.metamorph.ml :as ml]
            [scicloj.metamorph.ml.loss :as loss]
            [scicloj.ml.smile.regression]
            [tech.v3.dataset.modelling :as modelling]
            [tech.v3.dataset.metamorph :as tmd.mm]
            [clojure.math :as math]
            [aerial.hanami.templates :as ht]
            [scicloj.noj.v1.vis.hanami :as hanami]
            [scicloj.kindly.v4.api :as kindly]
            [scicloj.kindly.v4.kind :as kind]))
```
:::



## Prepare data


::: {.sourceClojure}
```clojure
(def xydata
  (-> [;; (day-of-month, hour, minute, percentage)
       ;; d   h   m   p
       [24,  0, 57, 85]
       [24, 10, 54, 78]
       [24, 18, 53, 65]
       [24, 23, 16, 58]
       [25,  3, 13, 55]
       [25,  6, 30, 46]
       [25, 10, 51, 36]
       [25, 12, 15, 33]]
      tc/dataset
      (tc/rename-columns [:d :h :m :y])
      (tc/map-columns :x [:d :h :m] (fn [d h m]
                                      (+ (* d 24 60)
                                         (* h 60)
                                         m)))
      (tc/select-columns [:x :y])))
```
:::



::: {.sourceClojure}
```clojure
xydata
```
:::


:_unnamed [8 2]:

|    :x | :y |
|------:|---:|
| 34617 | 85 |
| 35214 | 78 |
| 35693 | 65 |
| 35956 | 58 |
| 36193 | 55 |
| 36390 | 46 |
| 36651 | 36 |
| 36735 | 33 |




::: {.sourceClojure}
```clojure
(-> xydata
    (hanami/plot ht/point-chart
                 {:XSCALE {:zero false}
                  :MSIZE 200}))
```
:::



```{=html}
<div><script>vegaEmbed(document.currentScript.parentElement, {"encoding":{"y":{"field":"y","type":"quantitative"},"x":{"scale":{"zero":false},"field":"x","type":"quantitative"}},"usermeta":{"embedOptions":{"renderer":"svg"}},"mark":{"type":"circle","size":200,"tooltip":true},"width":400,"background":"floralwhite","height":300,"data":{"url":"curve_fitting_files\/0.csv","format":{"type":"csv"}}});</script></div>
```



## Auxiliary functions


::: {.sourceClojure}
```clojure
(defn quadroots
  "Solve quadratic equation ax^2 + bx + c = 0
  Return the positive root.
  We expect it to be >= xdata[0] but do not test for this.
  Raise exception if there is no positive root.
  The smaller positive root must be smaller than
  the first value of `:x` in `xydata`."
  [a b c]
  (let [disc (- (* b b)
                (* 4 a c))
        throw-fn (fn [msg]
                   (throw (ex-info msg
                                   {:a a
                                    :b b
                                    :c c
                                    :disc disc})))
        _ (when-not (pos? disc)
            (throw-fn  "Discriminant is not positive"))
        sqrt-disc (math/sqrt disc)
        pre-x1 (+ (- b) sqrt-disc)
        pre-x2 (- (- b) sqrt-disc)
        [x1 x2] (if (< pre-x1 pre-x2)
                  [pre-x2 pre-x1]
                  [pre-x1 pre-x2])]
    (when (neg? x1)
      (throw-fn "There is no positive root"))
    (when (> x2 ((xydata :x) 0))
      (throw-fn "The smaller positive root is too big"))
    x1))
```
:::



## Compute


::: {.sourceClojure}
```clojure
(def processed-data
  (-> xydata
      (tc/add-column :xx #(fun/sq (:x %)))
      (modelling/set-inference-target :y)))
```
:::



::: {.sourceClojure}
```clojure
(def model
  (-> processed-data
      (ml/train {:model-type :smile.regression/ordinary-least-square})))
```
:::


Printed model summary


::: {.sourceClojure}
```clojure
(ml/thaw-model model)
```
:::



::: {.printedClojure}
```clojure
Linear Model:

Residuals:
       Min          1Q      Median          3Q         Max
   -1.5222     -0.4425     -0.2019      1.1882      2.5998

Coefficients:
                  Estimate Std. Error    t value   Pr(>|t|)
Intercept       -7831.7120  1677.6175    -4.6684     0.0055 **
x                   0.4674     0.0940     4.9729     0.0042 **
xx                 -0.0000     0.0000    -5.2396     0.0034 **
---------------------------------------------------------------------
Significance codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Residual standard error: 1.6179 on 5 degrees of freedom
Multiple R-squared: 0.9946,    Adjusted R-squared: 0.9925
F-statistic: 462.0310 on 3 and 5 DF,  p-value: 2.125e-06

```
:::


Coefficients as data:


::: {.sourceClojure}
```clojure
(ml/explain model)
```
:::



::: {.printedClojure}
```clojure
{:bias -7831.711993948818,
 :coefficients ([:x 0.46735517687137845] [:xx -6.894148026198877E-6])}

```
:::


Predictions


::: {.sourceClojure}
```clojure
(-> processed-data
    (ml/predict model))
```
:::


:_unnamed [8 1]:

|          :y |
|------------:|
| 85.21164462 |
| 76.81181047 |
| 66.51897358 |
| 59.52221756 |
| 52.40019951 |
| 45.89077396 |
| 36.44249850 |
| 33.20188180 |




## Plot


::: {.sourceClojure}
```clojure
(-> processed-data
    (tc/add-column :predicted-y (fn [ds]
                                  (-> ds
                                      (ml/predict model)
                                      :y)))
    (hanami/layers {:TITLE "fitted curve"}
                   [(hanami/plot nil ht/point-chart {:MSIZE 200
                                                     :XSCALE {:zero false}})
                    (hanami/plot nil ht/line-chart {:Y :predicted-y
                                                    :MSIZE 4
                                                    :MCOLOR "brown"
                                                    :OPACITY 0.5
                                                    :YTITLE "y"})]))
```
:::



```{=html}
<div><script>vegaEmbed(document.currentScript.parentElement, {"usermeta":{"embedOptions":{"renderer":"svg"}},"width":400,"background":"floralwhite","title":{"text":"fitted curve"},"layer":[{"encoding":{"y":{"field":"y","type":"quantitative"},"x":{"scale":{"zero":false},"field":"x","type":"quantitative"}},"usermeta":{"embedOptions":{"renderer":"svg"}},"mark":{"type":"circle","size":200,"tooltip":true},"width":400,"background":"floralwhite","height":300},{"encoding":{"y":{"field":"predicted-y","type":"quantitative","axis":{"title":"y"}},"opacity":{"value":0.5},"x":{"field":"x","type":"quantitative"}},"usermeta":{"embedOptions":{"renderer":"svg"}},"mark":{"type":"line","size":4,"color":"brown","tooltip":true},"width":400,"background":"floralwhite","height":300}],"height":300,"data":{"url":"curve_fitting_files\/1.csv","format":{"type":"csv"}}});</script></div>
```



```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/noj/blob/main/notebooks/curve_fitting.clj">notebooks/curve_fitting.clj</a></small></small></pre></div>
```
