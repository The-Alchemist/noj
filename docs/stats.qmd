
---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [spacelab, notebooks/custom.scss]
    output-file: stats.html
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}
fontsize: 0.9em

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style>
<script src="stats_files/md-default0.js" type="text/javascript"></script><script src="stats_files/md-default1.js" type="text/javascript"></script>

# Statistics


::: {.sourceClojure}
```clojure
(ns stats
  (:require [scicloj.noj.v1.stats :as stats]
            [tablecloth.api :as tc]))
```
:::



## Example data


::: {.sourceClojure}
```clojure
(def iris
  (-> "https://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv"
      (tc/dataset {:key-fn keyword})
      (tc/rename-columns {:Sepal.Length :sepal-length
                          :Sepal.Width :sepal-width
                          :Petal.Length :petal-length
                          :Petal.Width :petal-width
                          :Species :species})))
```
:::



## Correlation matrices

The `stats/calc-correlations-matrix` function commputes the correlation
matrix of selected columns of a given dataset,
organizing the resulting data as a dataset.


::: {.sourceClojure}
```clojure
(-> iris
    (stats/calc-correlations-matrix
     [:sepal-length :sepal-width :petal-length :petal-width]))
```
:::


_unnamed [16 3]:

|        :col-1 |        :col-2 |       :corr |
|---------------|---------------|------------:|
| :sepal-length | :sepal-length |  1.00000000 |
| :sepal-length |  :sepal-width | -0.11000000 |
| :sepal-length | :petal-length |  0.87000000 |
| :sepal-length |  :petal-width |  0.81000000 |
|  :sepal-width | :sepal-length | -0.11000000 |
|  :sepal-width |  :sepal-width |  1.00000000 |
|  :sepal-width | :petal-length | -0.41999999 |
|  :sepal-width |  :petal-width | -0.36000001 |
| :petal-length | :sepal-length |  0.87000000 |
| :petal-length |  :sepal-width | -0.41999999 |
| :petal-length | :petal-length |  1.00000000 |
| :petal-length |  :petal-width |  0.95999998 |
|  :petal-width | :sepal-length |  0.81000000 |
|  :petal-width |  :sepal-width | -0.36000001 |
|  :petal-width | :petal-length |  0.95999998 |
|  :petal-width |  :petal-width |  1.00000000 |




## Multivariate regression

The `stats/regression-model` function computes a regressiom model (using `scicloj.ml`)
and adds some relevant information such as the `R^2` measure.


::: {.sourceClojure}
```clojure
(-> iris
    (stats/regression-model
     :sepal-length
     [:sepal-width :petal-length :petal-width]
     {:model-type :smile.regression/elastic-net})
    (dissoc :model-data))
```
:::



::: {.printedClojure}
```clojure
{:feature-columns [:sepal-width :petal-length :petal-width],
 :target-columns [:sepal-length],
 :explained #function[malli.core/-instrument/fn--53980],
 :R2 0.8582120394597336,
 :id #uuid "4d79799e-51bf-4327-b9e9-35b5468402a9",
 :predictions #tech.v3.dataset.column&lt;float64&gt;[150]
:sepal-length
[5.022, 4.724, 4.775, 4.851, 5.081, 5.360, 4.911, 5.030, 4.664, 4.903, 5.209, 5.098, 4.775, 4.572, 5.184, 5.522, 5.089, 4.970, 5.352, 5.217...],
 :predict
 #function[scicloj.noj.v1.stats/regression-model/predict--58208],
 :options {:model-type :smile.regression/elastic-net}}

```
:::



::: {.sourceClojure}
```clojure
(-> iris
    (stats/regression-model
     :sepal-length
     [:sepal-width :petal-length :petal-width]
     {:model-type :smile.regression/ordinary-least-square})
    (dissoc :model-data))
```
:::



::: {.printedClojure}
```clojure
{:feature-columns [:sepal-width :petal-length :petal-width],
 :target-columns [:sepal-length],
 :explained #function[malli.core/-instrument/fn--53980],
 :R2 0.8586117200664085,
 :id #uuid "b0094022-8f93-4062-a5aa-59ba5a3732e0",
 :predictions #tech.v3.dataset.column&lt;float64&gt;[150]
:sepal-length
[5.015, 4.690, 4.749, 4.826, 5.080, 5.377, 4.895, 5.021, 4.625, 4.882, 5.216, 5.092, 4.746, 4.533, 5.199, 5.561, 5.094, 4.960, 5.368, 5.226...],
 :predict
 #function[scicloj.noj.v1.stats/regression-model/predict--58208],
 :options {:model-type :smile.regression/ordinary-least-square}}

```
:::


The `stats/linear-regression-model` convenience function
uses specifically the `:smile.regression/ordinary-least-square` model type.


::: {.sourceClojure}
```clojure
(-> iris
    (stats/linear-regression-model
     :sepal-length
     [:sepal-width :petal-length :petal-width])
    (dissoc :model-data))
```
:::



::: {.printedClojure}
```clojure
{:feature-columns [:sepal-width :petal-length :petal-width],
 :target-columns [:sepal-length],
 :explained #function[malli.core/-instrument/fn--53980],
 :R2 0.8586117200664085,
 :id #uuid "e939e331-b93d-47ea-8933-579bd467a26a",
 :predictions #tech.v3.dataset.column&lt;float64&gt;[150]
:sepal-length
[5.015, 4.690, 4.749, 4.826, 5.080, 5.377, 4.895, 5.021, 4.625, 4.882, 5.216, 5.092, 4.746, 4.533, 5.199, 5.561, 5.094, 4.960, 5.368, 5.226...],
 :predict
 #function[scicloj.noj.v1.stats/regression-model/predict--58208],
 :options {:model-type :smile.regression/ordinary-least-square}}

```
:::



## Adding regression predictions to a dataset

The `stats/add-predictions` function
models a target column using feature columns,
adds a new prediction column with the model predictions.


::: {.sourceClojure}
```clojure
(-> iris
    (stats/add-predictions
     :sepal-length
     [:sepal-width :petal-length :petal-width]
     {:model-type :smile.regression/ordinary-least-square}))
```
:::


https://vincentarelbundock.github.io/Rdatasets/csv/datasets/iris.csv [150 7]:

| :rownames | :sepal-length | :sepal-width | :petal-length | :petal-width |  :species | :sepal-length-prediction |
|----------:|--------------:|-------------:|--------------:|-------------:|-----------|-------------------------:|
|         1 |           5.1 |          3.5 |           1.4 |          0.2 |    setosa |               5.01541576 |
|         2 |           4.9 |          3.0 |           1.4 |          0.2 |    setosa |               4.68999718 |
|         3 |           4.7 |          3.2 |           1.3 |          0.2 |    setosa |               4.74925142 |
|         4 |           4.6 |          3.1 |           1.5 |          0.2 |    setosa |               4.82599409 |
|         5 |           5.0 |          3.6 |           1.4 |          0.2 |    setosa |               5.08049948 |
|         6 |           5.4 |          3.9 |           1.7 |          0.4 |    setosa |               5.37719368 |
|         7 |           4.6 |          3.4 |           1.4 |          0.3 |    setosa |               4.89468378 |
|         8 |           5.0 |          3.4 |           1.5 |          0.2 |    setosa |               5.02124524 |
|         9 |           4.4 |          2.9 |           1.4 |          0.2 |    setosa |               4.62491347 |
|        10 |           4.9 |          3.1 |           1.5 |          0.1 |    setosa |               4.88164236 |
|       ... |           ... |          ... |           ... |          ... |       ... |                      ... |
|       140 |           6.9 |          3.1 |           5.4 |          2.1 | virginica |               6.53429168 |
|       141 |           6.7 |          3.1 |           5.6 |          2.4 | virginica |               6.50917327 |
|       142 |           6.9 |          3.1 |           5.1 |          2.3 | virginica |               6.21025556 |
|       143 |           5.8 |          2.7 |           5.1 |          1.9 | virginica |               6.17251376 |
|       144 |           6.8 |          3.2 |           5.9 |          2.3 | virginica |               6.84264484 |
|       145 |           6.7 |          3.3 |           5.7 |          2.5 | virginica |               6.65460564 |
|       146 |           6.7 |          3.0 |           5.2 |          2.3 | virginica |               6.21608504 |
|       147 |           6.3 |          2.5 |           5.0 |          1.9 | virginica |               5.97143313 |
|       148 |           6.5 |          3.0 |           5.2 |          2.0 | virginica |               6.38302984 |
|       149 |           6.2 |          3.4 |           5.4 |          2.3 | virginica |               6.61824630 |
|       150 |           5.9 |          3.0 |           5.1 |          1.8 | virginica |               6.42341317 |



It attaches the model's information
to the metadata of that new column.


::: {.sourceClojure}
```clojure
(-> iris
    (stats/add-predictions
     :sepal-length
     [:sepal-width :petal-length :petal-width]
     {:model-type :smile.regression/ordinary-least-square})
    :sepal-length-prediction
    meta
    (update :model
            dissoc :model-data :predict :predictions))
```
:::



::: {.printedClojure}
```clojure
{:name :sepal-length-prediction,
 :datatype :float64,
 :n-elems 150,
 :column-type :prediction,
 :model
 {:feature-columns [:sepal-width :petal-length :petal-width],
  :target-columns [:sepal-length],
  :explained #function[malli.core/-instrument/fn--53980],
  :R2 0.8586117200664085,
  :id #uuid "ab469d89-7ecb-479b-97d1-8b7d52f4d04f",
  :options {:model-type :smile.regression/ordinary-least-square}}}

```
:::



## Histograms

The `stats/histogram` function computes the necessary data
to plot a histogram.


::: {.sourceClojure}
```clojure
(-> (repeatedly 99 rand)
    (stats/histogram {:bin-count 5}))
```
:::


_unnamed [5 3]:

| :count |      :left |     :right |
|-------:|-----------:|-----------:|
|     18 | 0.01608801 | 0.20848452 |
|     23 | 0.20848452 | 0.40088102 |
|     20 | 0.40088102 | 0.59327752 |
|     14 | 0.59327752 | 0.78567402 |
|     24 | 0.78567402 | 0.97807052 |




```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/noj/blob/main/notebooks/stats.clj">notebooks/stats.clj</a></small></small></pre></div>
```
