[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Noj Documentation",
    "section": "",
    "text": "1 Preface\nNoj (scinojure) is an opinionated way to use the emerging Clojure data stack.\nThis book is its WIP documentation.\n\ndatasets\nimage\npython\nstats\nvisualization\n\n\n\n\n\nsource: notebooks/index.clj"
  },
  {
    "objectID": "datasets.html",
    "href": "datasets.html",
    "title": "2  Datasets",
    "section": "",
    "text": "(ns datasets\n  (:require [scicloj.noj.v1.datasets :as datasets]))\n\n\ndatasets/iris\n\n_unnamed [150 5]:\n\n\n\n\n\n\n\n\n\n\n:sepal-length\n:sepal-width\n:petal-length\n:petal-width\n:species\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n\n\n4.6\n3.4\n1.4\n0.3\nsetosa\n\n\n5.0\n3.4\n1.5\n0.2\nsetosa\n\n\n4.4\n2.9\n1.4\n0.2\nsetosa\n\n\n4.9\n3.1\n1.5\n0.1\nsetosa\n\n\n…\n…\n…\n…\n…\n\n\n6.9\n3.1\n5.4\n2.1\nvirginica\n\n\n6.7\n3.1\n5.6\n2.4\nvirginica\n\n\n6.9\n3.1\n5.1\n2.3\nvirginica\n\n\n5.8\n2.7\n5.1\n1.9\nvirginica\n\n\n6.8\n3.2\n5.9\n2.3\nvirginica\n\n\n6.7\n3.3\n5.7\n2.5\nvirginica\n\n\n6.7\n3.0\n5.2\n2.3\nvirginica\n\n\n6.3\n2.5\n5.0\n1.9\nvirginica\n\n\n6.5\n3.0\n5.2\n2.0\nvirginica\n\n\n6.2\n3.4\n5.4\n2.3\nvirginica\n\n\n5.9\n3.0\n5.1\n1.8\nvirginica\n\n\n\n\ndatasets/mtcars\n\n_unnamed [32 12]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:name\n:mpg\n:cyl\n:disp\n:hp\n:drat\n:wt\n:qsec\n:vs\n:am\n:gear\n:carb\n\n\n\n\nMazda RX4\n21.0\n6\n160.0\n110\n3.90\n2.620\n16.46\n0\n1\n4\n4\n\n\nMazda RX4 Wag\n21.0\n6\n160.0\n110\n3.90\n2.875\n17.02\n0\n1\n4\n4\n\n\nDatsun 710\n22.8\n4\n108.0\n93\n3.85\n2.320\n18.61\n1\n1\n4\n1\n\n\nHornet 4 Drive\n21.4\n6\n258.0\n110\n3.08\n3.215\n19.44\n1\n0\n3\n1\n\n\nHornet Sportabout\n18.7\n8\n360.0\n175\n3.15\n3.440\n17.02\n0\n0\n3\n2\n\n\nValiant\n18.1\n6\n225.0\n105\n2.76\n3.460\n20.22\n1\n0\n3\n1\n\n\nDuster 360\n14.3\n8\n360.0\n245\n3.21\n3.570\n15.84\n0\n0\n3\n4\n\n\nMerc 240D\n24.4\n4\n146.7\n62\n3.69\n3.190\n20.00\n1\n0\n4\n2\n\n\nMerc 230\n22.8\n4\n140.8\n95\n3.92\n3.150\n22.90\n1\n0\n4\n2\n\n\nMerc 280\n19.2\n6\n167.6\n123\n3.92\n3.440\n18.30\n1\n0\n4\n4\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\nDodge Challenger\n15.5\n8\n318.0\n150\n2.76\n3.520\n16.87\n0\n0\n3\n2\n\n\nAMC Javelin\n15.2\n8\n304.0\n150\n3.15\n3.435\n17.30\n0\n0\n3\n2\n\n\nCamaro Z28\n13.3\n8\n350.0\n245\n3.73\n3.840\n15.41\n0\n0\n3\n4\n\n\nPontiac Firebird\n19.2\n8\n400.0\n175\n3.08\n3.845\n17.05\n0\n0\n3\n2\n\n\nFiat X1-9\n27.3\n4\n79.0\n66\n4.08\n1.935\n18.90\n1\n1\n4\n1\n\n\nPorsche 914-2\n26.0\n4\n120.3\n91\n4.43\n2.140\n16.70\n0\n1\n5\n2\n\n\nLotus Europa\n30.4\n4\n95.1\n113\n3.77\n1.513\n16.90\n1\n1\n5\n2\n\n\nFord Pantera L\n15.8\n8\n351.0\n264\n4.22\n3.170\n14.50\n0\n1\n5\n4\n\n\nFerrari Dino\n19.7\n6\n145.0\n175\n3.62\n2.770\n15.50\n0\n1\n5\n6\n\n\nMaserati Bora\n15.0\n8\n301.0\n335\n3.54\n3.570\n14.60\n0\n1\n5\n8\n\n\nVolvo 142E\n21.4\n4\n121.0\n109\n4.11\n2.780\n18.60\n1\n1\n4\n2\n\n\n\n\ndatasets/diamonds\n\n_unnamed [53940 10]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n:carat\n:cut\n:color\n:clarity\n:depth\n:table\n:price\n:x\n:y\n:z\n\n\n\n\n0.23\nIdeal\nE\nSI2\n61.5\n55.0\n326\n3.95\n3.98\n2.43\n\n\n0.21\nPremium\nE\nSI1\n59.8\n61.0\n326\n3.89\n3.84\n2.31\n\n\n0.23\nGood\nE\nVS1\n56.9\n65.0\n327\n4.05\n4.07\n2.31\n\n\n0.29\nPremium\nI\nVS2\n62.4\n58.0\n334\n4.20\n4.23\n2.63\n\n\n0.31\nGood\nJ\nSI2\n63.3\n58.0\n335\n4.34\n4.35\n2.75\n\n\n0.24\nVery Good\nJ\nVVS2\n62.8\n57.0\n336\n3.94\n3.96\n2.48\n\n\n0.24\nVery Good\nI\nVVS1\n62.3\n57.0\n336\n3.95\n3.98\n2.47\n\n\n0.26\nVery Good\nH\nSI1\n61.9\n55.0\n337\n4.07\n4.11\n2.53\n\n\n0.22\nFair\nE\nVS2\n65.1\n61.0\n337\n3.87\n3.78\n2.49\n\n\n0.23\nVery Good\nH\nVS1\n59.4\n61.0\n338\n4.00\n4.05\n2.39\n\n\n…\n…\n…\n…\n…\n…\n…\n…\n…\n…\n\n\n0.71\nIdeal\nG\nVS1\n61.4\n56.0\n2756\n5.76\n5.73\n3.53\n\n\n0.71\nPremium\nE\nSI1\n60.5\n55.0\n2756\n5.79\n5.74\n3.49\n\n\n0.71\nPremium\nF\nSI1\n59.8\n62.0\n2756\n5.74\n5.73\n3.43\n\n\n0.70\nVery Good\nE\nVS2\n60.5\n59.0\n2757\n5.71\n5.76\n3.47\n\n\n0.70\nVery Good\nE\nVS2\n61.2\n59.0\n2757\n5.69\n5.72\n3.49\n\n\n0.72\nPremium\nD\nSI1\n62.7\n59.0\n2757\n5.69\n5.73\n3.58\n\n\n0.72\nIdeal\nD\nSI1\n60.8\n57.0\n2757\n5.75\n5.76\n3.50\n\n\n0.72\nGood\nD\nSI1\n63.1\n55.0\n2757\n5.69\n5.75\n3.61\n\n\n0.70\nVery Good\nD\nSI1\n62.8\n60.0\n2757\n5.66\n5.68\n3.56\n\n\n0.86\nPremium\nH\nSI2\n61.0\n58.0\n2757\n6.15\n6.12\n3.74\n\n\n0.75\nIdeal\nD\nSI2\n62.2\n55.0\n2757\n5.83\n5.87\n3.64\n\n\n\n\n\n\n\nsource: notebooks/datasets.clj"
  },
  {
    "objectID": "image.html",
    "href": "image.html",
    "title": "3  Turning tensors into images",
    "section": "",
    "text": "(ns image\n  (:require [tech.v3.tensor :as tensor]\n            [tech.v3.datatype.functional :as fun]\n            [scicloj.noj.v1.vis.image :as vis.image]))\n\n\n(-> (for [i (range 100)]\n      (range 100))\n    tensor/ensure-tensor\n    (fun/* 400)\n    (vis.image/tensor->image :ushort-gray))\n\n\n\n\n\n\nsource: notebooks/image.clj"
  },
  {
    "objectID": "python.html#using-python-visualizations",
    "href": "python.html#using-python-visualizations",
    "title": "4  Python",
    "section": "4.1 Using Python visualizations",
    "text": "4.1 Using Python visualizations\n\n(require-python '[numpy :as np]\n                '[numpy.random :as np.random]\n                'matplotlib.pyplot\n                '[seaborn :as sns]\n                'json\n                '[arviz :as az])\n\n\n:ok\n\n\n(def sine-data\n  (-> {:x (range 0 (* 3 np/pi) 0.1)}\n      tc/dataset\n      (tc/add-column :y #(fun/sin (:x %)))))\n\n\n(vis.python/with-pyplot\n  ;; http://gigasquidsoftware.com/blog/2020/01/18/parens-for-pyplot/\n  (matplotlib.pyplot/plot\n   (:x sine-data)\n   (:y sine-data)))\n\n\n\n\n\n(vis.python/pyplot\n #(matplotlib.pyplot/plot\n   (:x sine-data)\n   (:y sine-data)))\n\n\n\n\nhttps://seaborn.pydata.org/tutorial/introduction\n\n(let [tips (sns/load_dataset \"tips\")]\n  (sns/set_theme)\n  (vis.python/pyplot\n   #(sns/relplot :data tips\n                 :x \"total_bill\"\n                 :y \"tip\"\n                 :col \"time\"\n                 :hue \"smoker\"\n                 :style \"smoker\"\n                 :size \"size\")))\n\n\n\n\n\n(let [size [10 50]\n      data {:normal (apply np.random/randn size)\n            :gumbel (np.random/gumbel :size size)\n            :student_t (np.random/standard_t :df 6\n                                             :size size)\n            :exponential (np.random/exponential :size size)}]\n  (vis.python/pyplot\n   #(az/plot_forest data)))\n\n\n\n\n\n:bye\n\n\n:bye\n\n\n\n\n\nsource: notebooks/python.clj"
  },
  {
    "objectID": "stats.html#correlation-matrices",
    "href": "stats.html#correlation-matrices",
    "title": "5  Statistics",
    "section": "5.1 Correlation matrices",
    "text": "5.1 Correlation matrices\nThe stats/calc-correlations-matrix function commputes the correlation matrix of selected columns of a given dataset, organizing the resulting data as a dataset.\n\n(-> datasets/iris\n    (stats/calc-correlations-matrix\n     [:sepal-length :sepal-width :petal-length :petal-width]))\n\n_unnamed [16 3]:\n\n\n\n:col-1\n:col-2\n:corr\n\n\n\n\n:sepal-length\n:sepal-length\n1.00000000\n\n\n:sepal-length\n:sepal-width\n-0.11000000\n\n\n:sepal-length\n:petal-length\n0.87000000\n\n\n:sepal-length\n:petal-width\n0.81000000\n\n\n:sepal-width\n:sepal-length\n-0.11000000\n\n\n:sepal-width\n:sepal-width\n1.00000000\n\n\n:sepal-width\n:petal-length\n-0.41999999\n\n\n:sepal-width\n:petal-width\n-0.36000001\n\n\n:petal-length\n:sepal-length\n0.87000000\n\n\n:petal-length\n:sepal-width\n-0.41999999\n\n\n:petal-length\n:petal-length\n1.00000000\n\n\n:petal-length\n:petal-width\n0.95999998\n\n\n:petal-width\n:sepal-length\n0.81000000\n\n\n:petal-width\n:sepal-width\n-0.36000001\n\n\n:petal-width\n:petal-length\n0.95999998\n\n\n:petal-width\n:petal-width\n1.00000000"
  },
  {
    "objectID": "stats.html#multivariate-regression",
    "href": "stats.html#multivariate-regression",
    "title": "5  Statistics",
    "section": "5.2 Multivariate regression",
    "text": "5.2 Multivariate regression\nThe stats/regression-model function computes a regressiom model (using scicloj.ml) and adds some relevant information such as the R^2 measure.\n\n(-> datasets/iris\n    (stats/regression-model\n     :sepal-length\n     [:sepal-width :petal-length :petal-width]\n     {:model-type :smile.regression/elastic-net})\n    (dissoc :model-data))\n\n\n{:feature-columns [:sepal-width :petal-length :petal-width],\n :target-columns [:sepal-length],\n :explained #function[malli.core/-instrument/fn--57180],\n :R2 0.8582120394597336,\n :id #uuid \"c40b7f88-ac0d-4cb1-aa90-c2312a19d09e\",\n :predictions #tech.v3.dataset.column&lt;float64&gt;[150]\n:sepal-length\n[5.022, 4.724, 4.775, 4.851, 5.081, 5.360, 4.911, 5.030, 4.664, 4.903, 5.209, 5.098, 4.775, 4.572, 5.184, 5.522, 5.089, 4.970, 5.352, 5.217...],\n :predict\n #function[scicloj.noj.v1.stats/regression-model/predict--61396],\n :options {:model-type :smile.regression/elastic-net}}\n\n\n(-> datasets/iris\n    (stats/regression-model\n     :sepal-length\n     [:sepal-width :petal-length :petal-width]\n     {:model-type :smile.regression/ordinary-least-square})\n    (dissoc :model-data))\n\n\n{:feature-columns [:sepal-width :petal-length :petal-width],\n :target-columns [:sepal-length],\n :explained #function[malli.core/-instrument/fn--57180],\n :R2 0.8586117200664085,\n :id #uuid \"ad586561-f28f-42d7-81de-6e4b38b9cdbe\",\n :predictions #tech.v3.dataset.column&lt;float64&gt;[150]\n:sepal-length\n[5.015, 4.690, 4.749, 4.826, 5.080, 5.377, 4.895, 5.021, 4.625, 4.882, 5.216, 5.092, 4.746, 4.533, 5.199, 5.561, 5.094, 4.960, 5.368, 5.226...],\n :predict\n #function[scicloj.noj.v1.stats/regression-model/predict--61396],\n :options {:model-type :smile.regression/ordinary-least-square}}\n\nThe stats/linear-regression-model convenience function uses specifically the :smile.regression/ordinary-least-square model type.\n\n(-> datasets/iris\n    (stats/linear-regression-model\n     :sepal-length\n     [:sepal-width :petal-length :petal-width])\n    (dissoc :model-data))\n\n\n{:feature-columns [:sepal-width :petal-length :petal-width],\n :target-columns [:sepal-length],\n :explained #function[malli.core/-instrument/fn--57180],\n :R2 0.8586117200664085,\n :id #uuid \"128702cb-d2b2-488f-b6a8-6c2df38a0816\",\n :predictions #tech.v3.dataset.column&lt;float64&gt;[150]\n:sepal-length\n[5.015, 4.690, 4.749, 4.826, 5.080, 5.377, 4.895, 5.021, 4.625, 4.882, 5.216, 5.092, 4.746, 4.533, 5.199, 5.561, 5.094, 4.960, 5.368, 5.226...],\n :predict\n #function[scicloj.noj.v1.stats/regression-model/predict--61396],\n :options {:model-type :smile.regression/ordinary-least-square}}"
  },
  {
    "objectID": "stats.html#adding-regression-predictions-to-a-dataset",
    "href": "stats.html#adding-regression-predictions-to-a-dataset",
    "title": "5  Statistics",
    "section": "5.3 Adding regression predictions to a dataset",
    "text": "5.3 Adding regression predictions to a dataset\nThe stats/add-predictions function models a target column using feature columns, adds a new prediction column with the model predictions.\n\n(-> datasets/iris\n    (stats/add-predictions\n     :sepal-length\n     [:sepal-width :petal-length :petal-width]\n     {:model-type :smile.regression/ordinary-least-square}))\n\n_unnamed [150 6]:\n\n\n\n\n\n\n\n\n\n\n\n:sepal-length\n:sepal-width\n:petal-length\n:petal-width\n:species\n:sepal-length-prediction\n\n\n\n\n5.1\n3.5\n1.4\n0.2\nsetosa\n5.01541576\n\n\n4.9\n3.0\n1.4\n0.2\nsetosa\n4.68999718\n\n\n4.7\n3.2\n1.3\n0.2\nsetosa\n4.74925142\n\n\n4.6\n3.1\n1.5\n0.2\nsetosa\n4.82599409\n\n\n5.0\n3.6\n1.4\n0.2\nsetosa\n5.08049948\n\n\n5.4\n3.9\n1.7\n0.4\nsetosa\n5.37719368\n\n\n4.6\n3.4\n1.4\n0.3\nsetosa\n4.89468378\n\n\n5.0\n3.4\n1.5\n0.2\nsetosa\n5.02124524\n\n\n4.4\n2.9\n1.4\n0.2\nsetosa\n4.62491347\n\n\n4.9\n3.1\n1.5\n0.1\nsetosa\n4.88164236\n\n\n…\n…\n…\n…\n…\n…\n\n\n6.9\n3.1\n5.4\n2.1\nvirginica\n6.53429168\n\n\n6.7\n3.1\n5.6\n2.4\nvirginica\n6.50917327\n\n\n6.9\n3.1\n5.1\n2.3\nvirginica\n6.21025556\n\n\n5.8\n2.7\n5.1\n1.9\nvirginica\n6.17251376\n\n\n6.8\n3.2\n5.9\n2.3\nvirginica\n6.84264484\n\n\n6.7\n3.3\n5.7\n2.5\nvirginica\n6.65460564\n\n\n6.7\n3.0\n5.2\n2.3\nvirginica\n6.21608504\n\n\n6.3\n2.5\n5.0\n1.9\nvirginica\n5.97143313\n\n\n6.5\n3.0\n5.2\n2.0\nvirginica\n6.38302984\n\n\n6.2\n3.4\n5.4\n2.3\nvirginica\n6.61824630\n\n\n5.9\n3.0\n5.1\n1.8\nvirginica\n6.42341317\n\n\n\nIt attaches the model’s information to the metadata of that new column.\n\n(-> datasets/iris\n    (stats/add-predictions\n     :sepal-length\n     [:sepal-width :petal-length :petal-width]\n     {:model-type :smile.regression/ordinary-least-square})\n    :sepal-length-prediction\n    meta\n    (update :model\n            dissoc :model-data :predict :predictions))\n\n\n{:name :sepal-length-prediction,\n :datatype :float64,\n :n-elems 150,\n :column-type :prediction,\n :model\n {:feature-columns [:sepal-width :petal-length :petal-width],\n  :target-columns [:sepal-length],\n  :explained #function[malli.core/-instrument/fn--57180],\n  :R2 0.8586117200664085,\n  :id #uuid \"17430f49-d648-4ed5-80e3-bd546213ca47\",\n  :options {:model-type :smile.regression/ordinary-least-square}}}"
  },
  {
    "objectID": "stats.html#histograms",
    "href": "stats.html#histograms",
    "title": "5  Statistics",
    "section": "5.4 Histograms",
    "text": "5.4 Histograms\nThe stats/histogram function computes the necessary data to plot a histogram.\n\n(-> (repeatedly 99 rand)\n    (stats/histogram {:bin-count 5}))\n\n_unnamed [5 3]:\n\n\n\n:count\n:left\n:right\n\n\n\n\n19\n0.00006641\n0.19824317\n\n\n24\n0.19824317\n0.39641994\n\n\n23\n0.39641994\n0.59459671\n\n\n16\n0.59459671\n0.79277348\n\n\n17\n0.79277348\n0.99095024\n\n\n\n\n\n\n\nsource: notebooks/stats.clj"
  },
  {
    "objectID": "visualization.html#visualizing-datases-with-hanami",
    "href": "visualization.html#visualizing-datases-with-hanami",
    "title": "6  Visualization",
    "section": "6.1 Visualizing datases with Hanami",
    "text": "6.1 Visualizing datases with Hanami\nNoj offers a few convenience functions to make Hanami plotting work smoothly with Tablecloth and Kindly.\n\n(def random-walk\n  (let [n 20]\n    (-> {:x (range n)\n         :y (->> (repeatedly n #(- (rand) 0.5))\n                 (reductions +))}\n        tc/dataset)))\n\n\n6.1.1 A simple plot\nWe can plot a Tablecloth datasete using a Hanami template:\n\n(-> random-walk\n    (hanami/plot ht/point-chart\n                 {:MSIZE 200}))\n\n\n\n\nLet us look inside the resulting vega-lite space. We can see the dataset is included as CSV:\n\n(-> random-walk\n    (hanami/plot ht/point-chart\n                 {:MSIZE 200})\n    kind/pprint)\n\n\n{:encoding\n {:y {:field \"y\", :type \"quantitative\"},\n  :x {:field \"x\", :type \"quantitative\"}},\n :mark {:type \"circle\", :size 200, :tooltip true},\n :width 400,\n :background \"floralwhite\",\n :height 300,\n :data\n {:values\n  \"x,y\\n0,-0.06461919014389106\\n1,-0.49556705176638005\\n2,-0.8748531560236191\\n3,-0.6605161932352847\\n4,-0.9096310229747948\\n5,-0.8276654122940954\\n6,-0.780337471826129\\n7,-0.5585664412872818\\n8,-0.08970619327575258\\n9,-0.4317156385939064\\n10,-0.5997421779065193\\n11,-0.7291776318411406\\n12,-0.9865180106397156\\n13,-1.3656680248615434\\n14,-1.1268461828872594\\n15,-1.0521028152345622\\n16,-0.6808077432767236\\n17,-0.2640891397597801\\n18,-0.3458442233533018\\n19,-0.8363775062274473\\n\",\n  :format {:type \"csv\"}}}\n\n\n\n6.1.2 Additional Hanami templates\nThe scicloj.noj.v1.vis.hanami.templates namespace add Hanami templates to Hanami’s own collection.\n\n(-> datasets/mtcars\n    (hanami/plot vht/boxplot-chart\n                 {:X :gear\n                  :XTYPE :nominal\n                  :Y :mpg}))\n\n\n\n\n\n(-> datasets/iris\n    (hanami/plot vht/rule-chart\n                 {:X :sepal-width\n                  :Y :sepal-length\n                  :X2 :petal-width\n                  :Y2 :petal-length\n                  :OPACITY 0.2\n                  :SIZE 3\n                  :COLOR \"species\"}))\n\n\n\n\n\n\n6.1.3 Grouped datasets\nGrouped datasets are handled automatically with a table view.\n\n(-> datasets/iris\n    (tc/group-by [:species])\n    (hanami/plot vht/rule-chart\n                 {:X :sepal-width\n                  :Y :sepal-length\n                  :X2 :petal-width\n                  :Y2 :petal-length\n                  :OPACITY 0.2\n                  :SIZE 3}))\n\n\n\n\n\n\nspecies\n\n\nplot\n\n\n\n\n\n\n\n\nsetosa\n\n\n\n\n\n\n\n\n\n\n\n\n\nversicolor\n\n\n\n\n\n\n\n\n\n\n\n\n\nvirginica\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.1.4 Layers\n\n(-> random-walk\n    (hanami/layers\n     {:TITLE \"points and a line\"}\n     [(hanami/plot nil\n                   ht/point-chart\n                   {:MSIZE 400})\n      (hanami/plot nil\n                   ht/line-chart\n                   {:MSIZE 4\n                    :MCOLOR \"brown\"})]))\n\n\n\n\nAlternatively:\n\n(-> random-walk\n    (hanami/combined-plot\n     ht/layer-chart\n     {:TITLE \"points and a line\"}\n     :LAYER [[ht/point-chart\n              {:MSIZE 400}]\n             [ht/line-chart\n              {:MSIZE 4\n               :MCOLOR \"brown\"}]]))\n\n\n\n\n\n\n6.1.5 Concatenation\nVertical\n\n(-> random-walk\n    (hanami/vconcat\n     {}\n     [(hanami/plot nil\n                   ht/point-chart\n                   {:MSIZE 400\n                    :HEIGHT 100\n                    :WIDTH 100})\n      (hanami/plot nil\n                   ht/line-chart\n                   {:MSIZE 4\n                    :MCOLOR \"brown\"\n                    :HEIGHT 100\n                    :WIDTH 100})]))\n\n\n\n\nAlternatively:\n\n(-> random-walk\n    (hanami/combined-plot\n     ht/vconcat-chart\n     {:HEIGHT 100\n      :WIDTH 100}\n     :VCONCAT [[ht/point-chart\n                {:MSIZE 400}]\n               [ht/line-chart\n                {:MSIZE 4\n                 :MCOLOR \"brown\"}]]))\n\n\n\n\nHorizontal\n\n(-> random-walk\n    (hanami/hconcat\n     {}\n     [(hanami/plot nil\n                       ht/point-chart\n                       {:MSIZE 400\n                        :HEIGHT 100\n                        :WIDTH 100})\n      (hanami/plot nil\n                       ht/line-chart\n                       {:MSIZE 4\n                        :MCOLOR \"brown\"\n                        :HEIGHT 100\n                        :WIDTH 100})]))\n\n\n\n\nAlternatively:\n\n(-> random-walk\n    (hanami/combined-plot\n     ht/hconcat-chart\n     {:HEIGHT 100\n      :WIDTH 100}\n     :HCONCAT [[ht/point-chart\n                {:MSIZE 400}]\n               [ht/line-chart\n                {:MSIZE 4\n                 :MCOLOR \"brown\"}]]))\n\n\n\n\n\n\n6.1.6 Linear regression\n\n(-> datasets/mtcars\n    (stats/add-predictions :mpg [:wt]\n                           {:model-type :smile.regression/ordinary-least-square})\n    (hanami/combined-plot\n     ht/layer-chart\n     {:X :wt\n      :MSIZE 200\n      :HEIGHT 200}\n     :LAYER [[ht/point-chart\n              {:Y :mpg\n               :WIDTH 200}]\n             [ht/line-chart\n              {:Y :mpg-prediction\n               :MSIZE 5\n               :MCOLOR \"purple\"\n               :YTITLE :mpg}]]))\n\n\n\n\nAlternatively:\n\n(-> datasets/mtcars\n    (hanami/linear-regression-plot\n     :mpg :wt\n     {:HEIGHT 200\n      :WIDTH 200\n      :point-options {:MSIZE 200}\n      :line-options {:MSIZE 5\n                     :MCOLOR \"purple\"}}))\n\n\n\n\nAnd in a grouped dataset case:\n\n(-> datasets/mtcars\n    (tc/group-by [:gear])\n    (hanami/linear-regression-plot\n     :mpg :wt\n     {:HEIGHT 200\n      :WIDTH 200\n      :point-options {:MSIZE 200}\n      :line-options {:MSIZE 5\n                     :MCOLOR \"purple\"}}))\n\n\n\n\n\n\ngear\n\n\nplot\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.1.7 Histogram\nA histogram groups values in bins, counts them, and creates a corresponding bar-chart.\nThe hanami/histogram functions does that behind the scenes, and generates a Vega-Lite spec using Hanami.\n\n(-> datasets/iris\n    (hanami/histogram :sepal-width\n                      {:nbins 10}))\n\n\n\n\n\n(-> datasets/iris\n    (hanami/histogram :sepal-width\n                      {:nbins 10})\n    kind/pprint)\n\n\n{:encoding\n {:y {:field :count, :type \"quantitative\"},\n  :x\n  {:scale {:zero false},\n   :field :left,\n   :type \"quantitative\",\n   :title :sepal-width},\n  :y2 {:field 0, :type \"quantitative\"},\n  :x2 {:scale {:zero false}, :field :right, :type \"quantitative\"}},\n :mark \"rect\",\n :width 400,\n :background \"floralwhite\",\n :height 300,\n :data\n {:values\n  \"count,left,right\\n4,2.0,2.24\\n7,2.24,2.48\\n22,2.48,2.72\\n24,2.72,2.96\\n37,2.96,3.2\\n31,3.2,3.4400000000000004\\n10,3.4400000000000004,3.6800000000000006\\n11,3.6800000000000006,3.9200000000000004\\n2,3.9200000000000004,4.16\\n2,4.16,4.4\\n\",\n  :format {:type \"csv\"}}}\n\nThe resulting spec can be customized further:\n\n(-> datasets/iris\n    (hanami/histogram :sepal-width\n                      {:nbins 10})\n    ;; varying the resulting vega-lite spec:\n    (assoc :height 125\n           :width 175))\n\n\n\n\n\n\n6.1.8 Combining a few things together\nThe following is inspired by the example at Plotnine’s main page. Note how we add regression lines here. We take care of layout and colouring on our side, not using Vega-Lite for that.\n\n(let [pallete (->> :accent\n                   color/palette\n                   (mapv color/format-hex))]\n  (-> datasets/mtcars\n      (tc/group-by :gear {:result-type :as-map})\n      (->> (sort-by key)\n           (map-indexed\n            (fn [i [group-name ds]]\n              (-> ds\n                  (hanami/linear-regression-plot\n                   :mpg :wt\n                   {:TITLE (str \"grear=\" group-name)\n                    :X :wt\n                    :MCOLOR (pallete i)\n                    :HEIGHT 200\n                    :WIDTH 200\n                    :point-options {:MSIZE 200}\n                    :line-options {:MSIZE 5}}))))\n           (hanami/vconcat nil {}))))\n\n\n\n\nAlternatively, using a grouped dataset:\n\n(let [pallete (->> :accent\n                   color/palette\n                   (mapv color/format-hex))]\n  (-> datasets/mtcars\n      (tc/map-columns :color [:gear] #(-> % (- 3) pallete))\n      (tc/group-by [:gear])\n      (hanami/linear-regression-plot\n       :mpg :wt\n       {:X :wt\n        :MCOLOR {:expr \"datum.color\"}\n        :HEIGHT 200\n        :WIDTH 200\n        :point-options {:MSIZE 200}\n        :line-options {:MSIZE 5}})\n      (tc/order-by [:gear])))\n\n\n\n\n\n\ngear\n\n\nplot\n\n\n\n\n\n\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\nA similar example with histograms:\n\n(let [pallete (->> :accent\n                   color/palette\n                   (mapv color/format-hex))]\n  (-> datasets/iris\n      (tc/group-by :species {:result-type :as-map})\n      (->> (sort-by key)\n           (map-indexed\n            (fn [i [group-name ds]]\n              (-> ds\n                  (hanami/histogram :sepal-width\n                                    {:nbins 10}))))\n           (hanami/vconcat nil {}))))\n\n\n\n\nScatterplots and regression lines again, this time using Vega-Lite for layout and coloring (using its “facet” option).\n\n(-> datasets/mtcars\n    (tc/group-by [:gear])\n    (stats/add-predictions :mpg [:wt]\n                           {:model-type :smile.regression/ordinary-least-square})\n    (tc/ungroup)\n    (tc/select-columns [:gear :wt :mpg :mpg-prediction])\n    (hanami/combined-plot\n     ht/layer-chart\n     {}\n     :LAYER [[ht/point-chart\n              {:X :wt\n               :Y :mpg\n               :MSIZE 200\n               :COLOR \"gear\"\n               :HEIGHT 100\n               :WIDTH 200}]\n             [ht/line-chart\n              {:X :wt\n               :Y :mpg-prediction\n               :MSIZE 5\n               :COLOR \"gear\"\n               :YTITLE :mpg}]])\n    ((fn [spec]\n       {:facet {:row {:field \"gear\"}}\n        :spec (dissoc spec :data)\n        :data (:data spec)}))\n    kind/vega-lite)\n\n\n\n\n\n:bye\n\n\n:bye\n\n\n\n\n\nsource: notebooks/visualization.clj"
  }
]